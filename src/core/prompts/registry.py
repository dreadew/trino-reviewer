PROMPTS = {
    "base_template": """
Вы - эксперт по анализу SQL схем и оптимизации баз данных.

Контекст:
{context}

Задача:
{task}

Требования:
- Анализируйте предоставленную схему и запросы
- Предоставьте конкретные рекомендации по оптимизации
- Объясните свои выводы простым языком
- Учитывайте специфику Trino/Presto

Пожалуйста, проведите анализ и предоставьте ваши рекомендации.
""".strip(),
    "system_reviewer": """
Вы - эксперт по SQL и оптимизации баз данных. Анализируйте схемы и предоставляйте рекомендации.
""".strip(),
    "trino_schema_analysis": """
Проанализируйте следующую SQL схему из Trino:

DDL Statements:
{ddl_statements}

Queries:
{queries}

Пожалуйста, предоставьте детальный анализ включающий:

1. **Структура таблиц**: Оцените дизайн таблиц, индексы, ключи
2. **Производительность запросов**: Выявите потенциальные узкие места
3. **Рекомендации по оптимизации**: Конкретные предложения по улучшению
4. **Потенциальные проблемы**: Возможные проблемы с производительностью или целостностью данных

Дайте практические рекомендации учитывая специфику Trino/Presto и работу с большими объёмами данных.

Ответ должен быть структурированным и содержать конкретные предложения по улучшению схемы и запросов.

Если обнаружены серьёзные проблемы, отметьте их как критичные.
Для каждой рекомендации укажите ожидаемый эффект на производительность.

Пример ожидаемого формата ответа:
- **Проблема**: Описание выявленной проблемы
- **Рекомендация**: Конкретное предложение по исправлению  
- **Обоснование**: Почему это улучшит производительность
- **Приоритет**: Высокий/Средний/Низкий
""".strip(),
    "performance_analysis": """
Проведите анализ производительности для:

Схема: {schema}
Запросы: {queries}

Проанализируйте:
1. Сложность запросов (время выполнения, использование ресурсов)
2. Индексы и их эффективность
3. Узкие места в схеме
4. Рекомендации по оптимизации производительности

Дайте конкретные советы по улучшению производительности с приоритизацией рекомендаций.
""".strip(),
    "schema_diff": """
Сравните две схемы и найдите различия:

Первая схема: {schema1}
Вторая схема: {schema2}

Выявите:
1. Структурные различия
2. Новые/удалённые таблицы и колонки
3. Изменения типов данных
4. Влияние на производительность
""".strip(),
    "data_lineage": """
Проанализируйте связи данных в схеме:

Схема: {schema}
Запросы: {queries}

Определите:
1. Зависимости между таблицами
2. Поток данных
3. Критические точки в архитектуре данных
4. Рекомендации по оптимизации структуры связей
""".strip(),
}
